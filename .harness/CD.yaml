pipeline:
  name: "CD "
  identifier: CD
  projectIdentifier: technical_exercise
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: deploy
        identifier: deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: hubsvc
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: gcpinfra
          execution:
            steps:
              - step:
                  type: Http
                  name: HTTP
                  identifier: HTTP
                  spec:
                    method: GET
                    headers:
                      - key: Authorization
                        value: Basic <+secrets.getValue("azureacrbase64")>
                    outputVariables:
                      - name: tags
                        value: <+json.object(httpResponseBody).tags>
                        type: String
                      - name: tags4
                        value: test
                        type: String
                    url: https://<+serviceVariables.login>.<+serviceVariables.azure>/acr/v1/<+serviceVariables.base>/<+serviceVariables.chart>/_tags
                  timeout: 10s
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
              - step:
                  type: K8sDelete
                  name: Delete
                  identifier: Delete
                  spec:
                    deleteResources:
                      type: ReleaseName
                      spec:
                        deleteNamespace: false
                  timeout: 10m
              - step:
                  type: CustomApproval
                  name: Custom Approval
                  identifier: CustomApproval
                  spec:
                    rejectionCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions: []
                    approvalCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions:
                          - key: hello
                            operator: equals
                            value: bye
                    scriptTimeout: 10m
                    retryInterval: 10s
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: echo <+execution.steps.HTTP.output.outputVariables.tags> jq ''
                    environmentVariables: []
                    outputVariables:
                      - name: version
                        type: String
                        value: version
                  timeout: 1d
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
